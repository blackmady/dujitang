{"version":3,"sources":["util.js","App.js","serviceWorker.js","index.js"],"names":["file","promise","JSZip","external","Promise","resolve","reject","JSZipUtils","getBinaryContent","err","data","then","loadAsync","zip","async","text","e","Jitang","useState","jitang","updateJitang","a","setA","getList","atob","jt","replace","toLowerCase","split","preventDefault","b","decodeURI","Math","random","length","useEffect","list","document","querySelector","click","className","style","position","top","width","zIndex","marginTop","t","margin","padding","height","viewBox","version","xmlns","p-id","d","fill","paddingTop","href","id","fontSize","bottom","onClick","getOne","Boolean","window","location","hostname","match","ReactDOM","render","App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"ySACe,WAAUA,GACvB,IAAIC,EAAU,IAAIC,IAAMC,SAASC,SAAQ,SAAUC,EAASC,GAE1DC,WAAWC,iBAAiBR,GAAM,SAAUS,EAAKC,GAC3CD,EACFH,EAAOG,GAEPJ,EAAQK,SAId,OAAO,IAAIN,SAAQ,SAACC,EAAQC,GAC1BL,EAAQU,KAAKT,IAAMU,WAClBD,MAAK,SAAUE,GACd,OAAOA,EAAIb,KAAK,UAAUc,MAAM,aAEjCH,MAAK,SAAiBI,GACrBV,EAAQU,MACP,SAAeC,GAChBV,EAAOU,UCkDEC,MA7Df,WAAmB,IAAD,EACYC,mBAAS,IADrB,mBACTC,EADS,KACFC,EADE,OAEDF,mBAAS,IAFR,mBAETG,EAFS,KAEPC,EAFO,cAGDC,IAHC,2EAGhB,sBAAAF,EAAA,kEACeG,KADf,SAC2BC,EAAG,aAD9B,mBAC4C,eAAeC,QAAQ,gBAAgB,IAAIC,cADvF,KACuG,EADvG,gDAC+GC,MAAM,KADrH,oFAHgB,kEAMhB,WAAsBZ,GAAtB,eAAAK,EAAA,sDACEL,GAAKA,EAAEa,iBACHC,EAAEC,UAAUV,EAAEW,KAAKC,SAASZ,EAAEa,OAAO,IACzCd,EAAaU,GAHf,4CANgB,sBAmBhB,OARAK,qBAAU,WACR,sBAAC,4BAAAd,EAAA,sEACgBE,IADhB,OACKa,EADL,OAECd,EAAKc,GAELC,SAASC,cAAc,WAAWC,QAJnC,0CAAD,KAMA,IAEA,6BACE,yBACEC,UAAU,WACVC,MAAO,CAACC,SAAU,WAAWC,IAAK,MAAMC,MAAO,OAAOC,OAAQ,MAE9D,yBAAKL,UAAU,aACb,yBAAKA,UAAU,MAAMC,MAAO,CAACK,UAAW,KACtC,yBAAKN,UAAU,OACb,yBAAKO,EAAE,gBAAgBP,UAAU,OAAOC,MAAO,CAACG,MAAO,OAAOI,OAAQ,EAAEC,QAAS,EAAEC,OAAQ,QAASC,QAAQ,gBAAgBC,QAAQ,MAAMC,MAAM,6BAA6BC,OAAK,MAAMV,MAAM,MAAMM,OAAO,OAAM,0BAAMK,EAAE,+hFAA+hFD,OAAK,MAAME,KAAK,cAE1wF,yBAAKhB,UAAU,OACb,yBAAKA,UAAU,cAAcC,MAAO,CAACgB,WAAW,QAC9C,uBACEjB,UAAU,oCACVkB,KAAK,yCAFP,qBAQV,yBAAKlB,UAAU,eAAeC,MAAO,CAACC,SAAU,WAAYC,IAAK,SAC/D,yBAAKH,UAAU,8DACb,0BAAMmB,GAAG,WAAWlB,MAAO,CAACmB,SAAU,SAAUzC,KAGpD,yBAAKqB,UAAU,SAASC,MAAO,CAACC,SAAU,WAAYmB,OAAQ,MAAMjB,MAAO,SACzE,yBAAKJ,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,mBACb,uBAAGA,UAAU,aAAb,wCACA,0BAAMA,UAAU,qCACd,uBAAGkB,KAAK,IAAIC,GAAG,SAASnB,UAAU,oCAAoCsB,QAAS,SAAC9C,GAAD,OAnD7E,2CAmDkF+C,CAAO/C,KAA3F,+CChDIgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCLNC,IAASC,OAAO,kBAACC,EAAD,MAASlC,SAASmC,eAAe,SDoH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhE,MAAK,SAAAiE,GACjCA,EAAaC,kB","file":"static/js/main.2a64d34e.chunk.js","sourcesContent":["import JSZip from 'jszip'\r\nexport default function (file) {\r\n  var promise = new JSZip.external.Promise(function (resolve, reject) {\r\n    // eslint-disable-next-line no-undef\r\n    JSZipUtils.getBinaryContent(file, function (err, data) {\r\n      if (err) {\r\n        reject(err);\r\n      } else {\r\n        resolve(data);\r\n      }\r\n    });\r\n  });\r\n  return new Promise((resolve,reject)=>{\r\n    promise.then(JSZip.loadAsync) \r\n    .then(function (zip) {\r\n      return zip.file(\"jt.txt\").async(\"string\"); \r\n    })\r\n    .then(function success(text) {\r\n      resolve(text)\r\n    }, function error(e) {\r\n      reject(e)\r\n    });\r\n  })\r\n}","/*\n * @Author: None\n * @LastEditors: None\n * @Date: 2019-11-14 12:27:50\n * @LastEditTime: 2019-11-14 18:40:31\n * @Description: \n */\nimport React,{useState,useEffect} from 'react';\nimport jt from './util'\nfunction Jitang() {\n  const [jitang,updateJitang]=useState('')\n  const [a,setA]=useState([])\n  async function getList(){\n    return await atob((await jt('./jt.json'))[`7sZlZIzXCEe'`.replace(/\\d|Z|X|E|z|'/g,'').toLowerCase()]([2][0])).split(',')\n  }\n  async function getOne(e){\n    e && e.preventDefault()\n    let b=decodeURI(a[Math.random()*a.length^0])\n    updateJitang(b)\n  }\n  useEffect(() => {\n    (async function(){\n      let list=await getList()\n      setA(list)\n      // await getOne()\n      document.querySelector('#getOne').click()\n    })()\n  },[])\n  return (\n    <div>\n      <div\n        className=\"top-wrap\"\n        style={{position: 'absolute',top: '1vh',width: '100%',zIndex: 999}}\n      >\n        <div className=\"container\">\n          <div className=\"row\" style={{marginTop: 30}}>\n            <div className=\"col\">\n              <svg t=\"1573725253322\" className=\"icon\" style={{width: '5rem',margin: 0,padding: 0,height: '3rem'}} viewBox=\"0 0 1474 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"587\" width=\"200\" height=\"200\"><path d=\"M1394.680586 407.892002a65.534689 65.534689 0 0 1 65.53469 65.534689v1.310694a65.534689 65.534689 0 0 1-65.53469 65.53469h-121.136777V842.939941A181.060059 181.060059 0 0 1 1092.50423 1023.97952H370.066199a181.039579 181.039579 0 0 1-181.03958-181.039579V540.251595H65.534689a65.534689 65.534689 0 0 1-65.534689-65.534689v-1.310694a65.534689 65.534689 0 0 1 65.534689-65.534689H1394.660107z m-192.446711 253.414452c12.697346-23.346733-13.188856-37.068059-41.123017-60.947261-27.934161-23.858723-9.645887-62.954261-29.449651-67.52121-19.803764-4.566949-31.98912 20.315754-36.044079 41.123018-4.054959 20.827743-1.02398 38.092038-35.552569 44.174476-34.528589 6.102918-109.156217-18.779784-168.547029-28.937661-59.411292-10.157877-68.545189-5.078938-116.795104 30.473631-48.229435 35.532089-36.044079 138.093878-36.04408 138.093878s-18.288274-36.556069-13.721325-89.352453c4.587428-52.816864 54.844343-89.864443 54.844343-89.864443s-55.847843-20.827743-182.780344 0c-126.932501 20.807264-170.594988 90.376432-198.52915 142.148837-27.913682 51.792884-28.425671 60.926781-42.638507 61.438771 0 0-20.315754-11.161377-33.0131-8.621907-12.697346 2.539469-12.697346 21.831243-7.106418 50.768904s51.280894 57.363333 67.0297 58.387313c15.728325 1.02398 597.594448 11.181856 622.47715-3.54297 24.882702-14.745305 2.539469-80.730545 1.0035-87.345453-1.51549-6.594428-18.779784 11.161377-27.422171 15.236816-8.621908 4.054959-66.49723 21.831243-81.734046 29.449651-15.236815 7.618408-52.304874-5.078938-52.304874-5.078939s9.154377-6.102918 57.383813-25.906682c48.229435-19.783284 120.317594-81.222056 158.921621-113.211175 38.583548-31.98912 41.123018-37.068059 70.060679-22.834744 28.937661 14.192356 58.366833 15.216336 71.084658-8.130397z m-742.835703 68.115118c-6.860663 2.51899-15.462091-4.300714-17.673886-7.741286-2.191316-3.440571-14.581468-17.059499 30.309793-54.393792 44.911742-37.334293 78.907862-48.700466 117.081819-57.752445 38.194436-9.01102 74.340913-7.782244 78.621147 6.246275 4.259755 14.00804-4.50551 21.565009-36.00312 22.117958-31.49761 0.573429-58.100598 7.51601-92.854463 24.00208-34.753865 16.48607-72.620628 65.0227-79.46081 67.52121zM1092.48375 146.531469a181.060059 181.060059 0 0 1 181.03958 181.03958v46.386272H189.067579v-46.386272a181.039579 181.039579 0 0 1 181.039579-181.03958h316.122957V94.144677c-22.240835-8.888142-36.945181-24.165917-36.945181-41.573568v-2.867143C649.264455 22.261315 685.922922 0 731.121378 0h1.658846c45.218936 0 81.877402 22.261315 81.877403 49.703966v2.887622c-0.02048 17.387172-14.724826 32.664947-36.965661 41.553089v52.386792h314.791784z\" p-id=\"588\" fill=\"#1296db\"></path></svg>\n            </div>\n            <div className=\"col\">\n              <div className=\"float-right\" style={{paddingTop:'0px'}}>\n                <a\n                  className=\"btn btn-primary btn-filled btn-xs\"\n                  href=\"https://github.com/blackmady/dujitang\">开源</a>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"main-wrapper\" style={{position: 'relative', top: '-6vh'}}>\n        <div className=\"container main-sentence justify-content-center text-center\">\n          <span id=\"sentence\" style={{fontSize: '2rem'}}>{jitang}</span>\n        </div>\n      </div>\n      <div className=\"foot-1\" style={{position: 'absolute', bottom: '7vh',width: '100%'}}>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col text-center\">\n              <p className=\"lead text\">截屏分享朋友</p>\n              <span className=\"btn btn-primary btn-filled btn-xs\">\n                <a href=\"/\" id=\"getOne\" className=\"btn btn-primary btn-filled btn-xs\" onClick={(e)=>getOne(e)}>我要的毒鸡汤</a>\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Jitang;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/*\n * @Author: None\n * @LastEditors: None\n * @Date: 2019-11-14 12:27:50\n * @LastEditTime: 2019-11-14 15:36:55\n * @Description: \n */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}